# В google colab добавить: !pip install pyTelegramBotAPI
#                          !pip install pyrandom
#                          !pip install pyos
# Чтобы добавить новое слово — нужно его прописать в массиве DEFINITOINS на 11 строчке
# Важно все новые аббривиатуры в коде писать только с маленьких букв
# Пользователь в телеграм может писать и с большой и с маленькой — код всегда приводит к строчным

from telebot import TeleBot, types
import random
import os

bot = TeleBot(token='токен бота', parse_mode='html') # создание бота

# словарь с определениями и аббревиатурами, которые знает бот
# в формате:
# 'ключевая фраза': 'соответствующее ей определение'
DEFINITOINS = {
    'кот': 'Мяу',
    'мяу': 'Мурррр',
    'мур': 'Мяу',
    'кошка': 'Мурмяу',
    'cat': 'Meow',
    'cats': 'Meow meow',
    'как тебя зовут?': 'Я Терри и у меня есть помощница Нэко',
    'как тебя зовут': 'Я Терри и у меня есть помощница Нэко',
    'кто ты': 'Мы - Тэрри и Нэко, поможем расшифровать незнакомые термины, аббревиатуры и определения',
    'кто ты?': 'Мы - Тэрри и Нэко, поможем расшифровать незнакомые термины, аббревиатуры и определения',
    'кот или кошка': 'Кошка',
    'привет': 'Мурмяууу!',
    'тестирование': 'Поиск разницы между ожидаемым и фактическим поведением. См.также "цель тестирования"',
    'цель тестирования': 'Поиск багов на ранних этапах',
    'http': 'Протокол передачи данных, язык общения между клиентом и сервером',
    'qa': 'Quality Assuranse - проактивная работа по построению процесса, включает в себя QC и Testing. См.также "qc", "testing"',
    'qc': 'Quality Control - требования + негативные значения, включает в себя Testing. См.также "qa", "testing"',
    'testing': 'Проверка строго по документации. См.также "qa", "qc"',
    'клиент-серверная архитектура': 'Клиент --http-запрос--> Бекенд --SQL--> БД --данные--> Сервер --http-ответ--> Клиент. См.также "клиент", "БД", "сервер", "http-запрос" "http-ответ"',
    'клиент': 'Визуализация - сайт/ мобильное приложение/ десктоп-приложение. web - JavaScript, ios - Swift, android - Kotlin, ios+android - Fuitter',
    'бекенд': 'Логика, сервер. С++, С#, Pyton, Java, Scala, Go, JavaScript',
    'бд': 'База данных - отвечает за хранение данных, можно представить в виде таблицы. Бывают реляционные - SQL, с отношениями, несколько БД (Postgress, MySQL) и нереляционные - noSQL- без отношений, одна таблица (Redis, MongoDB)',
    'база данных': 'Отвечает за хранение данных, можно представить в виде таблицы. Бывают реляционные - SQL, с отношениями, несколько БД (Postgress, MySQL) и нереляционные - noSQL- без отношений, одна таблица (Redis, MongoDB)',
    'стек': 'Описание технологий компании - то, что применяется на проекте, на чем программируют',
    'ручка': 'Http-запрос, также может называться метод, эндпоинт, хендлер, запрос',
    'метод': 'Http-запрос, также может называться ручка, эндпоинт, хендлер, запрос',
    'эндпоинт': 'Http-запрос, также может называться метод, ручка, хендлер, запрос',
    'хендлер': 'Http-запрос, также может называться метод, эндпоинт, ручка, запрос',
    'http-запрос': 'Request. Цель - передать информацию от клиента на сервер. Состоит из URL*, Headers*, Body. См.также "url", "headers", "body"',
    'http запрос': 'Request. Цель - передать информацию от клиента на сервер. Состоит из URL*, Headers*, Body. См.также "url", "headers", "body"',
    'запрос': 'Http-запрос, request. Цель - передать информацию от клиента на сервер. Состоит из URL*, Headers*, Body. См.также "url", "headers", "body"',
    'url': 'Обязательная часть http-запроса. Ссылка, максимальная длина 2048 знаков. Состоит из: Протокол-Домен(хост)-Порт-Путь-Квери-Якорь. См.также "протокол", "домен", "порт", "квери", "якорь"',
    'урл': 'Обязательная часть http-запроса. Ссылка, максимальная длина 2048 знаков. Состоит из: Протокол-Домен(хост)-Порт-Путь-Квери-Якорь. См.также "протокол", "домен", "порт", "квери", "якорь"',
    'протокол': 'Часть урла, http или https (более защищенный за счет SSL-сертификата)',
    'домен': '= хост, часть урла www.cats.ru',
    'хост': '= домен, часть урла www.cats.ru',
    'порт': 'Часть урла, виден не всегда, по умолчанию http = 80, https = 443',
    'квери': 'Линуксовый инструмент для взаимодействия с серверами. Является частью урла, включает дополнительные параметры, их может быть несколько, начинается с ?, разделяется &. Имеет строгий синтаксис название=значение. Можно передавать данные, кроме персональной информации',
    'якорь': 'Часть урла, только один, начинается с #, помогает приземлиться на конкретную часть сайта',
    'хедеры': 'Обязательная часть http-запроса/ответа. Заголовки, передают свойства запроса и клиента/сервера (технические): Запрос --> Host:..., Content-Type:..., User-Agent:..., Cookie:..., Auth:.../ Ответ --> Content-type:..., Server:..., Set-Cookie:..., Date:... . Строгий синтаксис Название(свойство):значение. Для передачи информации не используются (хотя, теоретически можно). См.также "cookie", "content-type", "http-запрос", "http-ответ"',
    'хедер': 'Обязательная часть http-запроса/ответа. Заголовки, передают свойства запроса и клиента/сервера (технические): Запрос --> Host:..., Content-Type:..., User-Agent:..., Cookie:..., Auth:.../ Ответ --> Content-type:..., Server:..., Set-Cookie:..., Date:... . Строгий синтаксис Название(свойство):значение. Для передачи информации не используются (хотя, теоретически можно). См.также "cookie", "content-type", "http-запрос", "http-ответ"',
    'хэдеры': 'Обязательная часть http-запроса/ответа. Заголовки, передают свойства запроса и клиента/сервера (технические): Запрос --> Host:..., Content-Type:..., User-Agent:..., Cookie:..., Auth:.../ Ответ --> Content-type:..., Server:..., Set-Cookie:..., Date:... . Строгий синтаксис Название(свойство):значение. Для передачи информации не используются (хотя, теоретически можно). См.также "cookie", "content-type", "http-запрос", "http-ответ"',
    'хэдер': 'Обязательная часть http-запроса/ответа. Заголовки, передают свойства запроса и клиента/сервера (технические): Запрос --> Host:..., Content-Type:..., User-Agent:..., Cookie:..., Auth:.../ Ответ --> Content-type:..., Server:..., Set-Cookie:..., Date:... . Строгий синтаксис Название(свойство):значение. Для передачи информации не используются (хотя, теоретически можно). См.также "cookie", "content-type", "http-запрос", "http-ответ"',
    'headers': 'Обязательная часть http-запроса/ответа. Заголовки, передают свойства запроса и клиента/сервера (технические): Запрос --> Host:..., Content-Type:..., User-Agent:..., Cookie:..., Auth:.../ Ответ --> Content-type:..., Server:..., Set-Cookie:..., Date:... . Строгий синтаксис Название(свойство):значение. Для передачи информации не используются (хотя, теоретически можно). См.также "cookie", "content-type", "http-запрос", "http-ответ"',
    'курл': 'Формат для передачи запросов, позволяет передать запрос со всей информацией по нему (URL, Headers, Body). См.также "url", "headers", "body"',
    'curl': 'Формат для передачи запросов, позволяет передать запрос со всей информацией по нему (URL, Headers, Body). См.также "url", "headers", "body"',
    'боди': 'Body (тело), часть http-запроса/ответа, передает информацию. См.также "http-запрос", "http-ответ"',
    'body': 'Часть http-запроса/ответа, передает информацию. См.также "http-запрос", "http-ответ"',
    'http-ответ': 'Response. Цель - передать информацию с сервера на клиент. Состоит из Status Code, Headers, Body. См.также "status code", "headers", "body"',
    'статус код': 'Часть http-ответа, показывает, что произошло с запросом (число). Информационные 100-199, успешные 200-299, перенаправленнные (редирект) 300-399, клиентские ошибки 400-499, серверные ошибки 500-599. См.также "код ошибки"',
    'status code': 'Часть http-ответа, показывает, что произошло с запросом (число). Информационные 100-199, успешные 200-299, перенаправленнные (редирект) 300-399, клиентские ошибки 400-499, серверные ошибки 500-599. См.также "код ошибки"',
    'код ошибки': '404 "Ничего не найдено", 500 "Ошибка сервера", 200 "Успешный ответ", 201 "Создано", 418 I am a teapot "Я чайник"',
    '404': 'код ошибки "Ничего не найдено"',
    '500': 'Ошибка сервера',
    '200': 'Успешный ответ',
    '201': 'Создано',
    'teapot': 'I am a teapot - ошибка 418 - "Я чайник"',
    'типот': 'I am a teapot - ошибка 418 - "Я чайник"',
    'rest': 'Архитектурный стиль, договоренность, философия, правила этикета. Нормы и правила программирования - как выстраивать клиент-серверную архитектуру. REST - "договоренности": какие форматы данных можем передавать в боди (JSON и XML, файл, HTML), есть разные типы запросов. См.также "json", "xml", "html", "типы запросов"',
    'рест': 'REST - архитектурный стиль, договоренность, философия, правила этикета. Нормы и правила программирования - как выстраивать клиент-серверную архитектуру. REST - "договоренности": какие форматы данных можем передавать в боди (JSON и XML, файл, HTML), есть разные типы запросов. См.также "json", "xml", "html", "типы запросов"',
    'рэст': 'REST - архитектурный стиль, договоренность, философия, правила этикета. Нормы и правила программирования - как выстраивать клиент-серверную архитектуру. REST - "договоренности": какие форматы данных можем передавать в боди (JSON и XML, файл, HTML), есть разные типы запросов. См.также "json", "xml", "html", "типы запросов"',
    'типы запросов': 'Наиболее часто встречающиеся: get (получение данных, ограничен длиной 2048, т.к. нет боди, идемпотентный), delete (идемпот., удаление), post (отправление данных, НЕидемпот.), put (изменение, идемпот.). Редкие: connect (установка "туннеля" к серверу, НЕидемпот.), options (параметры соединения, идемпот.), patch (частичное изменение, идемпот.), trace (тестовое сообщение, идемпот.), head (аналог get, идемпот.)',
    'запросы': 'Наиболее часто встречающиеся: get (получение данных, ограничен длиной 2048, т.к. нет боди, идемпотентный), delete (идемпот., удаление), post (отправление данных, НЕидемпот.), put (изменение, идемпот.). Редкие: connect (установка "туннеля" к серверу, НЕидемпот.), options (параметры соединения, идемпот.), patch (частичное изменение, идемпот.), trace (тестовое сообщение, идемпот.), head (аналог get, идемпот.)',
    'get': 'Тип запроса - получение данных, ограничен длиной 2048, т.к. нет боди',
    'delete': 'Тип запроса - удаление, идемпотентный',
    'post': 'Тип запроса - отправление данных, НЕидемпотентный',
    'put': 'Тип запроса - изменение, идемпотентный',
    'connect': 'Тип запроса - установка "туннеля" к серверу, НЕидемпотентный',
    'options': 'Тип запроса - параметры соединения, идемпотентный',
    'patch': 'Тип запроса - частичное изменение, идемпотентный',
    'trace': 'Тип запроса - тестовое сообщение, идемпотентный',
    'head': 'Тип запроса - аналог get (получение данных), идемпотентный',
    'идемпотентный': 'Такой http-запрос, повторный вызов которого не влияет на бекенд. Так разработчику легче понять, какой запрос можно кэшировать - идемпотентные можно',
    'json': 'Формат в боди. Используются только следующие типы данных: 1) Строка - абсолютно любые символы/ цифры/ буквы, помещенные в кавычки "Котик", 2) Число - без кавычек, м.б. с запятой, 3) Boolean (true/ false), 4) null - пустая строка, когда нет информации, 5) Массив - для перечисления ["Кот", "Кошка", "Котенок"], 5) Объект - для того, чтобы подробно описать свойства одного элемента, используются фигурные скобки',
    'массив': 'Тип данных, используется для перечисления - ["Кот", "Кошка", "Котенок"]',
    'объект': 'Тип данных, используется для подробного описания свойств одного элемента, используются фигурные скобки',
    'snake case': 'змеиный_регистр - вариант_написания_без_использования_пробелов. См.также "camel case"',
    'змеиный регистр': 'snake_case - вариант_написания_без_использования_пробелов. См.также "camel case"',
    'camel case': 'ГорбатыйРегистр/ ВерблюжийРегистр - ВариантНаписанияБезИспользованияПробелов. См.также "snake case"',
    'горбатый регистр': 'CamelCase/ ВерблюжийРегистр - ВариантНаписанияБезИспользованияПробелов. См.также "snake case"',
    'верблюжий регистр': 'CamelCase/ ГорбатыйРегистр - ВариантНаписанияБезИспользованияПробелов. См.также "snake case"',
    'xml': 'Формат в боди, считается более безопасным, чем json. Используем только теги, теги всегда парные - открывающий <> и закрывающий </>',
    'девтулза': 'DevTools - бесплатный инструмент, есть в каждом браузере',
    'девтулз': 'DevTools - бесплатный инструмент, есть в каждом браузере',
    'devtools': 'Бесплатный инструмент, есть в каждом браузере',
    'микросервис': 'Бекенд, отвечающий только за свою функциональность',
    'апи': 'API - Application Programer Interfase - интерфейс взаимодействия, совокупность всех запросов, http-методов. Включает в себя сами методы, а также их описание (документация к АПИ - swagger, openapi, github)',
    'api': 'Application Programer Interfase - интерфейс взаимодействия, совокупность всех запросов, http-методов. Включает в себя сами методы, а также их описание (документация к АПИ - swagger, openapi, github)',
    'постман': 'Postman - инструмент, позволяет сделать запрос в бекенд',
    'postman': 'Инструмент, позволяет сделать запрос в бекенд',
    'функциональное тестирование': 'Какие функции должен выполнять продукт и описание поведения. Требования к разделам, логике, поведению и функциям, как мы пользуемся продуктом (дизайн, документация, ТЗ/ спецификация, АПИ) = ручное тестирование',
    'ручное тестирование': 'Какие функции должен выполнять продукт и описание поведения. Требования к разделам, логике, поведению и функциям, как мы пользуемся продуктом (дизайн, документация, ТЗ/ спецификация, АПИ) = функциональное тестирование',
    'не функциональное тестирование': 'Какие требования к качеству продукта (инсталяционное, удобство, безопасность, нагрузочное и стресс-тестирование, тестирование требований)',
    'регресс': 'Проверка, что новый функционал не сломал существующий, включает в себя все тест-кейсы, которые есть. См.также "смоук"',
    'смоук': 'Выжимка самых критичных кейсов, примерно на 5 минут, правило в проде. См.также "регресс"',
    'негативное тестирование': 'Использование системы не типичным образом',
    'тест-кейс': 'Вид тестовой документации. Четкое описание действий, которые необходимо выполнить для проверки функционала: название, приоритет, предусловие (необ.), шаги, ожидаемый результат, постусловие (необ.). В тест-кейсе не должно быть фактического результата. Тест-кейсы ведут в TMS системах',
    'тест кейс': 'Вид тестовой документации. Четкое описание действий, которые необходимо выполнить для проверки функционала: название, приоритет, предусловие (необ.), шаги, ожидаемый результат, постусловие (необ.). В тест-кейсе не должно быть фактического результата. Тест-кейсы ведут в TMS системах',
    'виды тестирования': 'По позитивности (позитивное/ негативное); по количеству тест-кейсов (регресс/ смоук); по функциональности (функциональное/ не функциональное); по пониманию задачи (белый/ серый/ черный ящик); в зависимости от исполнителей (бета/ альфа); по разработке (веб/ бекенд/ моб. приложение); по автоматизации (ручное/ автоматизированное); по степени подготовки документации (по документации/ интуитивное); по уровням (интеграционное, е2у или системные тесты/ модульное)',
    'белый ящик': 'Вид тестирования, если задача очевидна, понятна и нет вопросов к ней - внутренняя структура, устройство, реализация известны тестировщику, есть доступ к коду. См.также "черный ящик"',
    'черный ящик': 'Вид тестирования если ничего не понятно, как и что нужно тестировать, работа исключительно с внешними интерфейсами тестируемой системы, без знания внутреннего устройства. См.также "белый ящик"',
    'тест дизайн': 'Процесс, который помогает ограничить количество тест-кейсов. Техники: разбиение на классы эквивалентности + анализ граничных значений, user story (в теории не техника тест-дизайна), pairwise',
    'тест-дизайн': 'Процесс, который помогает ограничить количество тест-кейсов. Техники: разбиение на классы эквивалентности + анализ граничных значений, user story (в теории не техника тест-дизайна), pairwise',
    'классы эквивалентности': 'Техника тест-дизайна. Множество значений, которые при тестировании дадут одинаковый результат. См.также "граничные значения"',
    'граничные значения': 'Техника тест-дизайна. Минимум, максимум, значения на стыке классов эквивалентности и +/- 1. См.также "классы эквивалентности"',
    'pairwise': 'Техника тест-дизайна. Попарное тестирование, комбинаторика - можем сократить количество проверок в 2 раза, не сократив при этом качество тестирования',
    'багрепорт': 'Вид тестовой документации. Отчет о найденной ошибке для разработчика, в отличие от тест-кейса включает в себя фактический результат (текущий результат). Summary (заголовок), Description (описание), Шаги воспроизведения, Текущий результат, Окружение, Тестовые устройства, Ручка, Аналитика, Документация, Логи, Slack (ссылка на тред), Priority, Severity, Followers, Assigne. См.также "severity", "priority"',
    'баг репорт': 'Вид тестовой документации. Отчет о найденной ошибке для разработчика, в отличие от тест-кейса включает в себя фактический результат (текущий результат). Summary (заголовок), Description (описание), Шаги воспроизведения, Текущий результат, Окружение, Тестовые устройства, Ручка, Аналитика, Документация, Логи, Slack (ссылка на тред), Priority, Severity, Followers, Assigne. См.также "severity", "priority"',
    'тестовая документация': '1) Тест-кейс, 2) Багрепорт, 3) Чек-лист. 4) Тест-план, 5) Отчет о тестировании',
    'северити': 'Severity - серьезность, влияние дефекта на работоспособность (blocker, critical, normal (major), minor, trivial), технические ошибки. См.также "priority"',
    'severity': 'Серьезность, влияние дефекта на работоспособность (blocker, critical, normal (major), minor, trivial), технические ошибки. См.также "priority"',
    'приорити': 'Priority - очередность исправления (blocker, critical, trivial), ошибки важные бизнесу. См.также "severity"',
    'priority': 'Очередность исправления (blocker, critical, trivial), ошибки важные бизнесу. См.также "severity"',
    'tms': 'Test Management System - сервис для хранения и сортировки тест-кейсов. См.также "тест-кейс"',
    'тмс': 'TMS - Test Management System - сервис для хранения и сортировки тест-кейсов. См.также "тест-кейс"',
    'run': 'Любой подход к тестированию',
    'suit': 'Наборы, папки, группы тест-кейсов. См.также "тест-кейс"',
    'milestone': 'Причина, зачем мы тестируем (например, релиз v 1.01)',
    'чек-лист': 'Вид тестовой документации. Набор всех проверок для текущего релиза/ функционала. Формат не строгий. Общее количеств проверок без детализации',
    'чек лист': 'Вид тестовой документации. Набор всех проверок для текущего релиза/ функционала. Формат не строгий. Общее количеств проверок без детализации',
    'lighthouse': 'В девтулзе - заранее написанные проверки от гугл для сайта. См.также "devtools"',
    'лайтхаус': 'В девтулзе - заранее написанные проверки от гугл для сайта. См.также "devtools"',
    'тест план': 'Вид тестовой документации, в котором записывают и структурируют все, что поможет провести успешное тестирование (подготовка к тестированию - инструменты тестирования, автотесты/ проверки из чек-листа/ регресс/ подготовка к релизу - саппорт, как релизим, мониторинги, дежурства, задачи на автотесты/ время на тестирование/ команда тестирования)',
    'тест-план': 'Вид тестовой документации, в котором записывают и структурируют все, что поможет провести успешное тестирование (подготовка к тестированию - инструменты тестирования, автотесты/ проверки из чек-листа/ регресс/ подготовка к релизу - саппорт, как релизим, мониторинги, дежурства, задачи на автотесты/ время на тестирование/ команда тестирования)',
    'чарльз': 'Charles - инструмент, аналог девтулз, удобен для мобилок. Базовая функция - просмотр запросов и содержимого. Breakpoints - останавливает запрос и(или) ответ, в момент остановки можно редактировать. Map local - подставляет в боди ответа json с компьютера',
    'charles': 'Инструмент, аналог девтулз, удобен для мобилок. Базовая функция - просмотр запросов и содержимого. Breakpoints - останавливает запрос и(или) ответ, в момент остановки можно редактировать. Map local - подставляет в боди ответа json с компьютера',
    'команды линукс': 'pwd - текущая папка, cd - сменить папку, cd.. - вернуться на уровень выше, ls - посмотреть содержимое папки, mkdir - создать новую папку, mv - переместить файл или папку, cp - копировать файл, touch - создать файл, rm - удаление, vim или nano - открыть файл во встроенном в консоль редакторе (печатать i, выйти esc, wq - сохранить и выйти, т.е. i-->esc-->:wq, cat - просмотреть файл)',
    'логи': 'Запись всего того, что делает бекенд, инструмент - Kibana',
    'гит': 'Git - технология, система управления/ контроля версиями (версиями кода). Популярные сервисы GitHub, GitLab, BitBucket. См.также "гит команды"',
    'git': 'Технология, система управления/ контроля версиями (версиями кода). Популярные сервисы GitHub, GitLab, BitBucket. См.также "гит команды"',
    'гит команды': 'git init - сделать из любой папки гит папку, git clone ссылка_на_репозиторий - скачать репозиторий, первое скачивание, git pull - спулить обновления с origin, git checkout -b "имя_новой_ветки" - создать новую ветку, git checkout "имя_ветки_на_которую_переключаемся", git add. - при добавлении/ удалении файлов, git commit -am "название_нового_коммита" - сохраняет текущие изменения, git push - запушить изменения, git log - показывает, какие файлы изменил, git merge master - вливается свежий мастер в ветку, git resert --hard - отменяет коммит',
    'agile': 'Философия гибкой разработки - правила организации труда, методология',
    'mvp': 'Minimal valuable product - как можно быстрее выкатить первую версию и постепенно ее дорабатывать',
    'master db': 'Основная БД, чтение и изменение. См.также "slave db"',
    'slave db': 'Копия основной БД, копия мастера, их м.б. несколько, только чтение См.также "master db"',
    'metabase': 'Аналог постман для базы данных. Выступает как бекенд, который делает SQL-запросы в Postgress БД (например, работа с БД Postgress с помощью программы metabase)',
    'join': 'Оператор SQL-запроса. JOIN (какую таблицу добавляем) ON (отношения столбиков таблиц). Виды join: left join (выведет все записи первой таблицы, а для ненайденных пар из второй проставит null), full join (выведет все записи из обеих таблиц), right join (выведет все записи второй таблицы, а для ненайденных пар из первой проставит null), join/ inner join (выводит только записи, у которых есть пара - обычный join), cross join (дает комбинацию каждой строки первой таблицы со всеми записями второй таблицы)',
    'агрегатные функции': 'SQL COUNT() - количество записей, SQL MIN() - минимальное из значений, SQL MAX() - максимальное из значений, SQL AVG() - среднее значение, SQL SUM() - сумма значений',
    'тестовое окружение': 'Место для тестирования, где можно проверить любую версию клиента и любую версию бекенда. Для тестовой среды другой хост (домен). См.также "клиент", "бекенд", "хост"',
    'ci cd': 'Continuous Integration/ Continuous Delivery - инструмент, который позволяет выкатывать версии кода на какое-либо окружение, философия непрерывной интеграции и доставки',
    'ci/cd': 'Continuous Integration/ Continuous Delivery - инструмент, который позволяет выкатывать версии кода на какое-либо окружение, философия непрерывной интеграции и доставки',
    'хостинг': 'Инструмент, который помогает нужную версию кода выкатить на нужное окружение (продовое или тестовое)',
    'пайплайн': 'Инструмент ci/cd, Визуализация прогресса',
    'линтеры': 'Автопроверки синтаксиса кода',
    'sdlc': 'Software development life cycle - жизненный цикл разработки',
    'моки': 'Заглушка, делается через postman, charles, wiremock. Применяется если клиент закончили быстрее, чем бекенд = хардкодить',
    'фикс': 'Новая ветка кода, которая решает возникшую проблему',
    'хотфикс': 'Релиз с решением бага',
    'юнит тесты': 'Маленькие, дешевые и быстрые. За их разработку отвечает команда разработчиков. Можно быстро и комплексно проверить стабильность приложения',
    'unit тесты': 'Маленькие, дешевые и быстрые. За их разработку отвечает команда разработчиков. Можно быстро и комплексно проверить стабильность приложения',
    'интеграционные тесты': 'Объединение программных модулей в группы и их последующее тестирование, в основном пишут разработчики',
    'тесты пользовательского функционала': 'Воссоздают пользовательские сценарии и проверяют приложение на стабильность и работоспопбность',
    'adb': 'Линуксовый инструмент, используемый для установки приложений и просмотра логов на андроид',
    'мобильное тестирование': 'Особенности: пуши, фоновый режим, звонок, смс, gps, наушники, установка/ удаление и обновление приложения, сеть - работа со слабым интернетом, батарея - подключение зарядного устройства, поворот экрана, вход по face id и отпечатку, работа на планшетах, кнопки на телефоне - назад на андроид и домой на iphone, тачевые события - лонг тап/ свайп, челка, оболочки на андроид - модификации на основе андроида',
    'эмулятор': 'Эмулирует аппараное и программное обеспечение, можно протестить работу микрофона/ динамика/ камеры/ батареи. Аппаратное обеспечение (железо) - микрофон, динамики, камера, батарея, клавиатура + Программное обеспечение - ОС. Пример: Android Studio. См.также "симулятор"',
    'симулятор': 'Имитирует только программное обеспечение. Работу железа протестировать на симуляторе не получится, только ПО. Симуляторы для ios-устройств предоставляются в среде разработки Xcode. См.также "эмулятор"',
    'html': 'Hypertext Markup Language -  стандартизированный язык гипертекстовой разметки документов для просмотра веб-страниц в браузере',
    'куки': 'Cookie - небольшой фрагмент данных, отправленный веб-сервером и хранимый на компьютере пользователя',
    'cookie': 'Небольшой фрагмент данных, отправленный веб-сервером и хранимый на компьютере пользователя',
    'баг': 'Ошибка в коде или программе, что приводит к их некорректной работе',
    'bug': 'Ошибка в коде или программе, что приводит к их некорректной работе',
    'апдейт': 'Обновление программы, прогресс в работе, изменения',
    'бэклог': 'Список задач, который скрам-команда планирует выполнить за один спринт', 
    'бенч': 'Сотрудник аутсорс-компании, который не задействован в коммерческом проекте, но получает зарплату в полном объеме и сохраняет социальный пакет. В это время сотрудник посещает собеседования на стороне клиента, а компания ищет ему подходящий проект. Реже — сотрудник занимается самообразованием',
    'бранч': 'Ветвь в системах управления версиями — направление разработки, независимое от других',
    'вайтишник': '«Войти в IT» — человек без релевантного опыта, который только пришел в ІТ-сферу',
    'ван-ту-ван': 'Встреча менеджера и подчиненного в формате «один на один» для обсуждения результатов и плана работы', 
    'выкатить': 'Опубликовать обновление, приложение, часть приложения, демоверсию и т.п.',
    'галера': 'Аутсорс-компания',
    'гребцы': 'Сотрудники аутсорс-компании, задействованные в разработке программного обеспечения',
    'груминг': 'Встреча, где разработчики обсуждают задачи (включая аналитические) и оценивают их сложность', 
    'дебажить': 'Искать и исправлять ошибки в коде',
    'дейлик': 'Короткая ежедневная встреча или созвон команды для синхронизации работы',
    'демка': 'Демонстрация приложения, чтобы пользователи могли ознакомиться с его функционалом',
    'днс': 'DNS - система доменных имен — иерархическая распределенная система преобразования имени хоста (компьютера или другого сетевого устройства) в IP-адрес',
    'dns': 'Система доменных имен — иерархическая распределенная система преобразования имени хоста (компьютера или другого сетевого устройства) в IP-адрес',
    'заасайнить': 'Назначить ответственного за задачу',
    'инстанс': 'Экземпляр класса в объектно-ориентированном программировании',
    'колл': 'Рабочий созвон',
    'коммит': 'Сохранение изменений кода в репозитории',
    'либа': 'Библиотека — готовый код для решения задач разработки',
    'лоад балансер': 'Балансировка нагрузки — распределение заданий между несколькими сетевыми устройствами для оптимизации использования ресурсов. Лоад балансер автоматически распределяет входящий трафик приложений по виртуальным устройствам',
    'митинг': 'Встреча или созвон для решения рабочих вопросов',
    'митап': 'Собрание IT-специалистов для обмена опытом и общения в неформальной обстановке. Часто — образовательного характера',
    'мержить': 'Объединять ветки в системе контроля версий',
    'мокап': 'Макет дизайна интерфейса приложения',
    'оффер': 'Предложение о работе', 
    'пайплайн': 'Процесс разработки по типу конвейера',
    'парсить': 'Собирать, систематизировать и анализировать данные с помощью специальных программ, автоматизирующих процесс',
    'песочница': 'Среда для безопасного выполнения программы',
    'пиай': 'PI, Performance Improvement — измерение результатов конкретного бизнес-процесса или процедуры, а затем модификация для повышения результативности',
    'pi': 'Performance Improvement — измерение результатов конкретного бизнес-процесса или процедуры, а затем модификация для повышения результативности',
    'пингануть': 'Напомнить кому-то о чем-то',
    'прод': 'Продакшн — рабочая версия продукта',
    'релиз': 'Выпуск готовой версии продукта',
    'ретро': 'Ретроспектива — мероприятие SCRUM-команды для инспекции своей работы и создания плана улучшений на следующий спринт',
    'ролбек': 'Откат к ранее развернутой версии',
    'спринт': 'Период, в течение которого SCRUM-команда выполняет задачи разработки', 
    'спека': 'Спецификация — документация для разработки и тестирования программного обеспечения',
    'спецификация': 'Спека — документация для разработки и тестирования программного обеспечения',
    'стендап': 'Регулярная короткая встреча команды, обычно в начале рабочего дня на 15 минут',
    'стейджинг': 'Среда, идентичная продакшн-окружению, но предназначенная для тестирования',
    'стори': 'Короткое описание функции программного обеспечения',
    'таска': 'Рабочая задача',
    'тест-ноутс': 'Заметки, которые тестировщик делает в ходе тестирования', 
    'фича': 'Особенность, уникальная характеристика или функционал: "Это не баг, а фича"',
    'хотфикс': 'Быстрое решение проблемы или бага, которое не будет работать в долгосрочной перспективе',
    'энви': 'Энвайронмент, окружение — компьютерная система или набор систем, в которых развертывается и выполняется компьютерная программа или программный компонент',
    'энв': 'Энвайронмент, окружение — компьютерная система или набор систем, в которых развертывается и выполняется компьютерная программа или программный компонент',
    'юнит': 'Элемент, подразделение',
}

#'': '',

# обработчик команды '/start'
@bot.message_handler(commands=['start'])

# отправляем ответ на команду '/start'
def welcome(message):

    bot.send_message(
       chat_id=message.chat.id, # id чата, в который необходимо направить сообщение
       text='Привет, {0.first_name}!\nЯ помогу тебе расшифровать сложные аббревиатуры и термины 😼\nВведи интересующий термин, например, тестирование'.format(message.from_user),parse_mode='html' # текст сообщения
       )
    
    sti=open('welcome.webp', 'rb')
    bot.send_sticker(message.chat.id,sti)


# обработчик всех остальных сообщений
@bot.message_handler()
def message_handler(message: types.Message):
    # пробуем найти ключевую фразу в словаре
    definition = DEFINITOINS.get(
        message.text.lower(), # приводим текст сообщения к нижнему регистру
    )
    # если фразы нет в словаре, то переменная definition будет иметь значение None
    # проверяем это условие

    if definition is None:
        # если ключевая фраза не была найдена в словаре
        # отправляем ответ
        keyboard = types.InlineKeyboardMarkup(row_width=1) # вывод кнопок в 1 колонку
        url_button1 = types.InlineKeyboardButton(text='Полосатый стикерпак 😸', url="https://t.me/addstickers/TerryNekoCats")
        url_button2 = types.InlineKeyboardButton(text='Ещё больше котофото 😻', url="https://instagram.com/terry_tigra_neko_cats")
        keyboard.add(url_button1, url_button2)
        bot.send_message(message.chat.id, text='🙀 Я пока не знаю такого определения', reply_markup=keyboard)

    else:   
        bot.send_message(
        chat_id=message.chat.id,
        text=f'👇🏻\n<code>{definition}</code>',
        )

    # вывод рандомного стикера из загруженной коллекции после определения
        sti=open('test/' + random.choice(os.listdir('test')), 'rb')
        bot.send_sticker(message.chat.id, sti)

        bot.send_message(
            chat_id=message.chat.id,
            text=f'Жду следующий термин',
        )

    return


# главная функция программы
def main():
    # запускаем нашего бота
    bot.infinity_polling()


if __name__ == '__main__':
    main()
